
// Import C implementations
#[link(name = "hw_acc.a")]
extern "C" {
    fn aesni_128_key_expansion(key: *mut u8, userkey: *const u8);

    fn aesni_192_key_expansion(key: *mut u8, userkey: *const u8);

    fn aesni_256_key_expansion(key: *mut u8, userkey: *const u8);

    fn aesni_enc_ecb(ct: *mut u8, rounds: usize, pt: *const u8,
        blocks: usize, key: *const u8);

    fn aesni_dec_ecb(pt: *mut u8, rounds: usize, ct: *const u8,
        blocks: usize, key: *const u8);

    fn vaesni_enc_ecb(ct: *mut u8, rounds: usize, pt: *const u8,
        blocks: usize, key: *const u8);

    fn vaesni_dec_ecb(pt: *mut u8, rounds: usize, ct: *const u8,
        blocks: usize, key: *const u8);
}

pub enum KeySize {
    K128,
    K192,
    K256
}

pub fn aesni_key_expansion(expanded_key: &mut [u8], enc_key: &[u8], key_size: KeySize) {
    match key_size {
        KeySize::K128 => unsafe { aesni_128_key_expansion(expanded_key.as_mut_ptr(), enc_key.as_ptr()) },
        KeySize::K192 => unsafe { aesni_192_key_expansion(expanded_key.as_mut_ptr(), enc_key.as_ptr()) },
        KeySize::K256 => unsafe { aesni_256_key_expansion(expanded_key.as_mut_ptr(), enc_key.as_ptr()) }
    }
}

pub fn aesni_ecb_enc(cypher_text: &mut [u8], plain_text: &[u8], blocks: usize,
    key_size: KeySize, enc_key: &[u8]) {
    let rounds: usize =
        match key_size {
            KeySize::K128 => 10,
            KeySize::K192 => 12,
            KeySize::K256 => 14
        };

    unsafe { aesni_enc_ecb(cypher_text.as_mut_ptr(), rounds, plain_text.as_ptr(), 
        blocks, enc_key.as_ptr()); } 
}

pub fn aesni_dec_enc(plain_text: &mut [u8], cypher_text: &[u8], blocks: usize,
    key_size: KeySize, enc_key: &[u8]) {
    let rounds: usize =
        match key_size {
            KeySize::K128 => 10,
            KeySize::K192 => 12,
            KeySize::K256 => 14
        };

    unsafe { aesni_dec_ecb(plain_text.as_mut_ptr(), rounds, cypher_text.as_ptr(), 
        blocks, enc_key.as_ptr()); } 
}

pub fn vaesni_ecb_enc(cypher_text: &mut [u8], plain_text: &[u8], blocks: usize,
    key_size: KeySize, enc_key: &[u8]) {
    let rounds: usize =
        match key_size {
            KeySize::K128 => 10,
            KeySize::K192 => 12,
            KeySize::K256 => 14
        };

    unsafe { vaesni_enc_ecb(cypher_text.as_mut_ptr(), rounds, plain_text.as_ptr(), 
        blocks, enc_key.as_ptr()); } 
}

pub fn vaesni_dec_enc(plain_text: &mut [u8], cypher_text: &[u8], blocks: usize,
    key_size: KeySize, enc_key: &[u8]) {
    let rounds: usize =
        match key_size {
            KeySize::K128 => 10,
            KeySize::K192 => 12,
            KeySize::K256 => 14
        };

    unsafe { vaesni_dec_ecb(plain_text.as_mut_ptr(), rounds, cypher_text.as_ptr(), 
        blocks, enc_key.as_ptr()); } 
}

#[cfg(test)]
mod aesni_test {

    use super::*;

    #[test]
    fn aesni_128_key_expansion_test() {
        let ek_size = 16*11;
        let k = vec![0u8; 128/8];
        let mut ek = vec![0u8; ek_size];
        aesni_key_expansion(&mut ek, &k, KeySize::K128);
        assert_eq!(ek,
            vec![
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 
                0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 
                0x90, 0x97, 0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 0xf2, 0xf4, 0x57, 0x33, 0x0b, 0x0f, 0xac, 0x99, 
                0xee, 0x06, 0xda, 0x7b, 0x87, 0x6a, 0x15, 0x81, 0x75, 0x9e, 0x42, 0xb2, 0x7e, 0x91, 0xee, 0x2b, 
                0x7f, 0x2e, 0x2b, 0x88, 0xf8, 0x44, 0x3e, 0x09, 0x8d, 0xda, 0x7c, 0xbb, 0xf3, 0x4b, 0x92, 0x90, 
                0xec, 0x61, 0x4b, 0x85, 0x14, 0x25, 0x75, 0x8c, 0x99, 0xff, 0x09, 0x37, 0x6a, 0xb4, 0x9b, 0xa7, 
                0x21, 0x75, 0x17, 0x87, 0x35, 0x50, 0x62, 0x0b, 0xac, 0xaf, 0x6b, 0x3c, 0xc6, 0x1b, 0xf0, 0x9b, 
                0x0e, 0xf9, 0x03, 0x33, 0x3b, 0xa9, 0x61, 0x38, 0x97, 0x06, 0x0a, 0x04, 0x51, 0x1d, 0xfa, 0x9f, 
                0xb1, 0xd4, 0xd8, 0xe2, 0x8a, 0x7d, 0xb9, 0xda, 0x1d, 0x7b, 0xb3, 0xde, 0x4c, 0x66, 0x49, 0x41, 
                0xb4, 0xef, 0x5b, 0xcb, 0x3e, 0x92, 0xe2, 0x11, 0x23, 0xe9, 0x51, 0xcf, 0x6f, 0x8f, 0x18, 0x8e 
            ]);
    }

    #[test]
    fn aesni_192_key_expansion_test() {
        let ek_size = 16*13;
        let k = vec![0u8; 192/8];
        let mut ek = vec![0u8; ek_size];
        aesni_key_expansion(&mut ek, &k, KeySize::K192);
        assert_eq!(ek,
            vec![
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 
                0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 
                0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 
                0x9b, 0x98, 0x98, 0xc9, 0xf9, 0xfb, 0xfb, 0xaa, 0x90, 0x97, 0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 
                0xf2, 0xf4, 0x57, 0x33, 0x0b, 0x0f, 0xac, 0x99, 0x90, 0x97, 0x34, 0x50, 0x69, 0x6c, 0xcf, 0xfa, 
                0xc8, 0x1d, 0x19, 0xa9, 0xa1, 0x71, 0xd6, 0x53, 0x53, 0x85, 0x81, 0x60, 0x58, 0x8a, 0x2d, 0xf9, 
                0xc8, 0x1d, 0x19, 0xa9, 0xa1, 0x71, 0xd6, 0x53, 0x7b, 0xeb, 0xf4, 0x9b, 0xda, 0x9a, 0x22, 0xc8, 
                0x89, 0x1f, 0xa3, 0xa8, 0xd1, 0x95, 0x8e, 0x51, 0x19, 0x88, 0x97, 0xf8, 0xb8, 0xf9, 0x41, 0xab, 
                0xc2, 0x68, 0x96, 0xf7, 0x18, 0xf2, 0xb4, 0x3f, 0x91, 0xed, 0x17, 0x97, 0x40, 0x78, 0x99, 0xc6, 
                0x59, 0xf0, 0x0e, 0x3e, 0xe1, 0x09, 0x4f, 0x95, 0x83, 0xec, 0xbc, 0x0f, 0x9b, 0x1e, 0x08, 0x30, 
                0x0a, 0xf3, 0x1f, 0xa7, 0x4a, 0x8b, 0x86, 0x61, 0x13, 0x7b, 0x88, 0x5f, 0xf2, 0x72, 0xc7, 0xca, 
                0x43, 0x2a, 0xc8, 0x86, 0xd8, 0x34, 0xc0, 0xb6, 0xd2, 0xc7, 0xdf, 0x11, 0x98, 0x4c, 0x59, 0x70 
            ]);
    }

    #[test]
    fn aesni_256_key_expansion_test() {
        let ek_size = 16*15;
        let k = vec![0u8; 256/8];
        let mut ek = vec![0u8; ek_size];
        aesni_key_expansion(&mut ek, &k, KeySize::K256);
        assert_eq!(ek,
            vec![
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 0x62, 0x63, 0x63, 0x63, 
                0xaa, 0xfb, 0xfb, 0xfb, 0xaa, 0xfb, 0xfb, 0xfb, 0xaa, 0xfb, 0xfb, 0xfb, 0xaa, 0xfb, 0xfb, 0xfb, 
                0x6f, 0x6c, 0x6c, 0xcf, 0x0d, 0x0f, 0x0f, 0xac, 0x6f, 0x6c, 0x6c, 0xcf, 0x0d, 0x0f, 0x0f, 0xac, 
                0x7d, 0x8d, 0x8d, 0x6a, 0xd7, 0x76, 0x76, 0x91, 0x7d, 0x8d, 0x8d, 0x6a, 0xd7, 0x76, 0x76, 0x91, 
                0x53, 0x54, 0xed, 0xc1, 0x5e, 0x5b, 0xe2, 0x6d, 0x31, 0x37, 0x8e, 0xa2, 0x3c, 0x38, 0x81, 0x0e, 
                0x96, 0x8a, 0x81, 0xc1, 0x41, 0xfc, 0xf7, 0x50, 0x3c, 0x71, 0x7a, 0x3a, 0xeb, 0x07, 0x0c, 0xab, 
                0x9e, 0xaa, 0x8f, 0x28, 0xc0, 0xf1, 0x6d, 0x45, 0xf1, 0xc6, 0xe3, 0xe7, 0xcd, 0xfe, 0x62, 0xe9, 
                0x2b, 0x31, 0x2b, 0xdf, 0x6a, 0xcd, 0xdc, 0x8f, 0x56, 0xbc, 0xa6, 0xb5, 0xbd, 0xbb, 0xaa, 0x1e, 
                0x64, 0x06, 0xfd, 0x52, 0xa4, 0xf7, 0x90, 0x17, 0x55, 0x31, 0x73, 0xf0, 0x98, 0xcf, 0x11, 0x19, 
                0x6d, 0xbb, 0xa9, 0x0b, 0x07, 0x76, 0x75, 0x84, 0x51, 0xca, 0xd3, 0x31, 0xec, 0x71, 0x79, 0x2f, 
                0xe7, 0xb0, 0xe8, 0x9c, 0x43, 0x47, 0x78, 0x8b, 0x16, 0x76, 0x0b, 0x7b, 0x8e, 0xb9, 0x1a, 0x62, 
                0x74, 0xed, 0x0b, 0xa1, 0x73, 0x9b, 0x7e, 0x25, 0x22, 0x51, 0xad, 0x14, 0xce, 0x20, 0xd4, 0x3b, 
                0x10, 0xf8, 0x0a, 0x17, 0x53, 0xbf, 0x72, 0x9c, 0x45, 0xc9, 0x79, 0xe7, 0xcb, 0x70, 0x63, 0x85, 
            ]);
    }

}
